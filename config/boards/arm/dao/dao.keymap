/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */
#define HOST_OS 2

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "../../../../zmk-nodefree-config/helper.h"

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define SMB 4

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };
&sk {  // sticky key config
    release-after-ms = <600>;           // release after 0.6s
    quick-release;                      // no double capitalization when rolling keys
};

// tap: sticky-shift | lshft + tap: caps-word | hold: shift

/ {
    macros {
         lang_shift: lang_shift {
            label = "lang_shift";
            compatible = "zmk,behavior-macro";
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LEFT_ALT>
                , <&macro_tap &kp LSHIFT>
                , <&macro_release &kp LEFT_ALT>
                ;
        };
    };
};
/*
/ {
    behaviors {
        ss_cw: sticky_shift_capsword {
            compatible = "zmk,behavior-mod-morph";
            label = "sticky_shift_capsword";
            #binding-cells = <0>;
            bindings = <&mt RSHFT BSPC>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };
    };
};
*/

/ {
    combos {
        compatible = "zmk,combos";
        combo_raise {
            timeout-ms = <50>;
            key-positions = <38 39 40>;
            bindings = < &tog RSE >;
        };
        combo_lower {
            timeout-ms = <50>;
            key-positions = <41 42 43>;
            bindings = < &tog LWR >;
        };
        combo_lang_shift {
            timeout-ms = <50>;
            key-positions = <38 39>;
            bindings = < &lang_shift >;
        };
        combo_lang_shift_2 {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = < &lang_shift >;
        };
        combo_copy {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = < &kp LC(C) >;
        };  
        combo_paste {
            timeout-ms = <50>;
            key-positions = <29 30>;
            bindings = < &kp LC(V) >;
        };     
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <39 42>;
            bindings = < &caps_word >;
        };
        smb_layer {
            timeout-ms = <50>;
            key-positions = <39 40>;
            bindings = < &tog 4 >;
        }; 
    };
};

ZMK_COMBO(cut, &kp LC(X), 27 28, ALL)
ZMK_COMBO(undo, &kp LC(Z), 26 27, ALL)
// tap: sticky-shift | lshft + tap: caps-word | hold: shift
ZMK_BEHAVIOR(ss_cw1, mod_morph,
    bindings = <&mt RSHFT BSPC>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
/*
ZMK_BEHAVIOR(sym_dot, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &kp LEFT_ALT>
             , <&macro_tap &kp KP_N4, &kp KP_N6>
             , <&macro_release &kp LEFT_ALT>;
)

ZMK_BEHAVIOR(sym_comma, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &kp LEFT_ALT>
             , <&macro_tap &kp KP_N4, &kp KP_N4>
             , <&macro_release &kp LEFT_ALT>;
)

ZMK_BEHAVIOR(sym_qmark, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &kp LEFT_ALT>
             , <&macro_tap &kp KP_N6, &kp KP_N3>
             , <&macro_release &kp LEFT_ALT>;
)

ZMK_BEHAVIOR(sym_lbkt, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &kp LEFT_ALT>
             , <&macro_tap &kp KP_N9, &kp KP_N1>
             , <&macro_release &kp LEFT_ALT>;
)

ZMK_BEHAVIOR(sym_rbkt, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &kp LEFT_ALT>
             , <&macro_tap &kp KP_N9, &kp KP_N3>
             , <&macro_release &kp LEFT_ALT>;
)

ZMK_BEHAVIOR(sym_lbrc, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &kp LEFT_ALT>
             , <&macro_tap &kp KP_N1, &kp KP_N2, &kp KP_N3>
             , <&macro_release &kp LEFT_ALT>;
)

ZMK_BEHAVIOR(sym_rbrc, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &kp LEFT_ALT>
             , <&macro_tap &kp KP_N1, &kp KP_N2, &kp KP_N5>
             , <&macro_release &kp LEFT_ALT>;
)
*/


ZMK_UNICODE_SINGLE(s_dot, KP_N0, KP_N0, KP_N4, KP_N6)       // .
ZMK_UNICODE_SINGLE(s_comma, KP_N0, KP_N0, KP_N4, KP_N4)     // ,
ZMK_UNICODE_SINGLE(s_qmark, KP_N0, KP_N0, KP_N6, KP_N3)     // ?
//ZMK_UNICODE_SINGLE(sym_less, KP_N6, KP_N3)
ZMK_UNICODE_SINGLE(s_lbkt, KP_N0, KP_N0, KP_N9, KP_N1)      // [
ZMK_UNICODE_SINGLE(s_rbkt, KP_N0, KP_N0, KP_N9, KP_N3)      // ]
ZMK_UNICODE_SINGLE(s_lbrc, KP_N0, KP_N1, KP_N2, KP_N3)      // {
ZMK_UNICODE_SINGLE(s_rbrc, KP_N0, KP_N1, KP_N2, KP_N5)      // }
ZMK_UNICODE_SINGLE(s_lt, KP_N0, KP_N0, KP_N6, KP_N0)        // <
ZMK_UNICODE_SINGLE(s_rt, KP_N0, KP_N0, KP_N6, KP_N3)        // >
/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
//        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
//        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
//                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |
                        bindings = <
   &kp LWIN &kp GRAVE &kp Q &kp W &kp E &kp R &kp T &kp Y         &kp U  &kp I     &kp O   &kp P    &kp LBKT &mt RGUI RBKT
            &sk LCTRL &kp A &kp S &kp D &kp F &kp G &kp H         &kp J  &kp K     &kp L   &kp SEMI &mt RCTRL SQT
            &sk LALT  &kp Z &kp X &kp C &kp V &kp B &kp N         &kp M  &kp COMMA &kp DOT &kp FSLH &mt RALT BSLH
                         &lt RSE TAB &mt LSHFT SPACE &lt LWR RET &lt LWR ESC &mt RSHFT BSPC &lt RSE DEL
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
//       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
//       |  =  |  ?  |  <  |  >  |  ,  |  .  |   |  -  |  _  |  [  |  ]  |  {  |  }  |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans &kp UNDER      &kp F1   &kp F2 &kp F3   &kp F4   &kp F5           &kp F6    &kp F7   &kp F8   &kp F9   &kp F10  &kp F11 &kp F12
          &mt LCTRL PLUS &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT        &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR &mt RCTRL MINUS
          &mt LALT EQUAL &s_qmark &s_lt  &s_rt    &s_comma &s_dot           &kp MINUS  &kp UNDER &s_lbkt  &s_rbkt  &s_lbrc  &s_rbrc
                                         &lt ADJ TAB &trans &trans          &trans &trans &lt ADJ DEL
                        >;
                };
                raise_layer {
// -----------------------------------------------------------------------------------------
// |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
//       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT|  UP | RGHT| INS | APP |
//       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
//                          |     |     | ADJ |   | ADJ |     |     |
                        bindings = <
   &trans &kp KP_NUM      &kp KP_SLASH    &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS        &kp LC(C) &kp HOME &kp UP      &kp PG_UP &kp LC(BSPC)    &kp LC(DEL) &ss_cw1
          &mt LCTRL EQUAL &kp KP_MULTIPLY &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS         &kp LC(V) &kp LEFT &kp DOWN    &kp RIGHT &kp INS         &mt RCTRL K_APP
          &trans          &kp KP_N0       &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_DOT          &kp LC(Z) &kp END  &kp LC(UP)  &kp PG_DN &kp PAUSE_BREAK &kp C_AL_CALCULATOR
                                                           &trans &trans &lt ADJ RET   &lt ADJ ESC &trans &trans
                        >;
                };
                adjust_layer {
// -----------------------------------------------------------------------------------------
// | RST | BLDR |     |     |     |     |     |   | M1  |     |     |     |     | BLDR | RST |
//       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
//       |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                          |     |     |     |   |     |     |     |
                        bindings = <
   &reset &bootloader  &none        &none        &none        &none        &none              &none        &kp C_VOL_DN &kp C_MUTE   &kp C_VOL_UP &none         &bootloader &reset
          &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0  &bt BT_CLR
          &none        &none        &none        &none        &none        &none              &kp C_PREV   &kp C_PP     &kp C_NEXT   &none        &none         &none
                                                                    &trans &none &trans   &trans &none &trans
                        >;
                };
                symbol_layer {
// -----------------------------------------------------------------------------------------
// |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
//       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
//       |  =  |  ?  |  <  |  >  |  ,  |  .  |   |  (  |  )  |  [  |  ]  |  {  |  }  |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans &kp UNDER      &kp F1   &kp F2 &kp F3   &kp F4   &kp F5           &kp F6    &kp F7   &kp F8   &kp F9   &kp F10  &kp F11 &kp F12
          &mt LCTRL PLUS &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT        &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR &mt RCTRL MINUS
          &mt LALT EQUAL &s_qmark &kp LT &kp GT   &s_comma &s_dot           &kp LPAR  &kp RPAR &s_lbkt  &s_rbkt  &s_lbrc  &s_rbrc
                                              &lt ADJ TAB &trans &trans   &trans &trans &lt ADJ DEL
                        >;
                };
        };
};
